{"version":3,"sources":["../src/technicals.ts"],"names":["totalForDays","prices","days","slice","reduce","acc","val","close","emaMultiplier","ema","length","k","value","i","Math","round","technicalCalculator","symbol","excludeToday","fullDayToday","date","isToday","time","pricesWithoutToday","total49","total50Yesterday","total199","total200Yesterday","ema9Yesterday","ema10Yesterday","ema12Yesterday","ema21Yesterday","ema26Yesterday","ma50Yesterday","ma200Yesterday","total19","total20Yesterday","ma20Yesterday","numRsiDays","gainsByDay","Array","lossesByDay","change","gain13","loss13","gain14","loss14","gain19","loss19","gain20","loss20","rsi","numDays","gains","losses","avgGain","avgLoss","rs","rsi20Yesterday","rsi14Yesterday","variance","initialPrice","avg","limit","initial","v","variance20Yesterday","stddev20Yesterday","sqrt","yesterday","ema9","ema10","ema12","ema21","ema26","ma50","ma200","rsi14","rsi20","bollinger","upper1SD","lower1SD","upper2SD","lower2SD","upper3SD","lower3SD","calculateLatest","latest","ma20","variance20","stddev20","createTechnicalCalculators","history","output","Map","entries","calc","set"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Bar } from 'types';\nimport * as date from 'date-fns';\n\nfunction totalForDays(prices: Bar[], days: number) {\n  return prices.slice(0, days).reduce((acc, val) => acc + val.close, 0);\n}\n\nfunction emaMultiplier(days: number) {\n  return 2 / (days + 1);\n}\n\nfunction ema(prices: Bar[], days: number) {\n  if (prices.length < days) {\n    return null;\n  }\n\n  // let smaForPeriod = totalForDays(latest, prices, days) / days;\n\n  let k = emaMultiplier(days);\n  let value = prices[prices.length - 1].close;\n  for (let i = prices.length - 1; i >= 0; i--) {\n    value = value + k * (prices[i].close - value);\n  }\n\n  return Math.round(value);\n}\n\nexport interface Technicals {\n  ma50: number;\n  ma200: number;\n  ema9: number;\n  ema10: number;\n  ema12: number;\n  ema21: number;\n  ema26: number;\n  rsi14: number;\n  rsi20: number;\n  bollinger: {\n    upper1SD: number;\n    lower1SD: number;\n    upper2SD: number;\n    lower2SD: number;\n    upper3SD: number;\n    lower3SD: number;\n  };\n}\n\nexport interface LatestTechnicals extends Technicals {\n  symbol: string;\n  prices: Bar[];\n  fullDayToday: boolean;\n  yesterday: Technicals;\n  latest: number;\n}\n\nexport interface TechnicalCalculator {\n  symbol: string;\n  prices: Bar[];\n  fullDayToday: boolean;\n  yesterday: Technicals;\n  latest(latestPrice: number): LatestTechnicals;\n}\n\nfunction technicalCalculator(\n  symbol: string,\n  prices: Bar[],\n  /** Exclude the first bar if it's from today. Use for daily bars only */\n  excludeToday = true\n): TechnicalCalculator {\n  let fullDayToday = excludeToday && date.isToday(prices[0].time);\n  let pricesWithoutToday = fullDayToday ? prices.slice(1) : prices;\n\n  let total49 = totalForDays(pricesWithoutToday, 49);\n  let total50Yesterday = total49 + pricesWithoutToday[49].close;\n\n  let total199 = pricesWithoutToday\n    .slice(49, 198)\n    .reduce((acc, val) => acc + val.close, total49);\n\n  let total200Yesterday = total199 + pricesWithoutToday[199].close;\n\n  let ema9Yesterday = ema(pricesWithoutToday, 9);\n  let ema10Yesterday = ema(pricesWithoutToday, 10);\n  let ema12Yesterday = ema(pricesWithoutToday, 12);\n  let ema21Yesterday = ema(pricesWithoutToday, 21);\n  let ema26Yesterday = ema(pricesWithoutToday, 26);\n  let ma50Yesterday = total50Yesterday / 50;\n  let ma200Yesterday = total200Yesterday / 200;\n\n  // Bollinger bands calculations\n  let total19 = totalForDays(pricesWithoutToday, 20);\n\n  let total20Yesterday = total19 + pricesWithoutToday[19].close;\n  let ma20Yesterday = total20Yesterday / 20;\n\n  const numRsiDays = 20;\n  let gainsByDay = new Array(numRsiDays);\n  let lossesByDay = new Array(numRsiDays);\n\n  for (let i = 0; i < numRsiDays; ++i) {\n    let change = pricesWithoutToday[i].close - pricesWithoutToday[i + 1].close;\n    if (change >= 0) {\n      gainsByDay[i] = (gainsByDay[i - 1] || 0) + change;\n      lossesByDay[i] = lossesByDay[i - 1] || 0;\n    } else {\n      gainsByDay[i] = gainsByDay[i - 1];\n      lossesByDay[i] = -change;\n    }\n  }\n\n  let gain13 = 0;\n  let loss13 = 0;\n\n  for (let i = 0; i < 13; i++) {\n    let change = pricesWithoutToday[i].close - pricesWithoutToday[i + 1].close;\n    if (change > 0) {\n      gain13 += change;\n    } else if (change < 0) {\n      loss13 -= change;\n    }\n  }\n\n  let gain14 = gain13;\n  let loss14 = loss13;\n\n  let change = pricesWithoutToday[13].close - pricesWithoutToday[14].close;\n  if (change > 0) {\n    gain14 += change;\n  } else if (change < 0) {\n    loss14 += change;\n  }\n\n  let gain19 = gain14;\n  let loss19 = loss14;\n\n  for (let i = 14; i < 19; i++) {\n    let change = pricesWithoutToday[i].close - pricesWithoutToday[i + 1].close;\n    if (change > 0) {\n      gain19 += change;\n    } else if (change < 0) {\n      loss19 -= change;\n    }\n  }\n\n  let gain20 = gain19;\n  let loss20 = loss19;\n  change = pricesWithoutToday[19].close - pricesWithoutToday[19].close;\n  if (change > 0) {\n    gain20 += change;\n  } else if (change < 0) {\n    loss20 += change;\n  }\n\n  function rsi(numDays, gains, losses) {\n    let avgGain = gains / numDays;\n    let avgLoss = losses / numDays;\n    let rs = avgGain / avgLoss;\n    return 100 - 100 / (1 + rs);\n  }\n\n  let rsi20Yesterday = rsi(20, gain20, loss20);\n  let rsi14Yesterday = rsi(14, gain14, loss14);\n\n  function variance(initialPrice, avg, limit) {\n    let initial = initialPrice ? initialPrice - avg : 0;\n    return pricesWithoutToday.slice(0, limit).reduce((acc, val) => {\n      let v = val.close - avg;\n      return acc + v * v;\n    }, initial * initial);\n  }\n\n  let variance20Yesterday = variance(0, ma20Yesterday, 20) / 19;\n  let stddev20Yesterday = Math.sqrt(variance20Yesterday);\n\n  let yesterday = {\n    prices: pricesWithoutToday,\n    ema9: ema9Yesterday,\n    ema10: ema10Yesterday,\n    ema12: ema12Yesterday,\n    ema21: ema21Yesterday,\n    ema26: ema26Yesterday,\n    ma50: ma50Yesterday,\n    ma200: ma200Yesterday,\n    rsi14: rsi14Yesterday,\n    rsi20: rsi20Yesterday,\n    bollinger: {\n      upper1SD: ma20Yesterday + stddev20Yesterday,\n      lower1SD: ma20Yesterday - stddev20Yesterday,\n      upper2SD: ma20Yesterday + stddev20Yesterday * 2,\n      lower2SD: ma20Yesterday - stddev20Yesterday * 2,\n      upper3SD: ma20Yesterday + stddev20Yesterday * 3,\n      lower3SD: ma20Yesterday - stddev20Yesterday * 3,\n    },\n  };\n\n  function calculateLatest(latest: number) {\n    latest *= 100;\n    let ma20 = (total19 + latest) / 20;\n    let variance20 = variance(latest, ma20, 19) / 19;\n    let stddev20 = Math.sqrt(variance20);\n\n    let rsi14;\n    let rsi20;\n    let change = latest - pricesWithoutToday[0].close;\n    if (change > 0) {\n      rsi14 = rsi(14, gain13 + change, loss13);\n      rsi20 = rsi(20, gain19 + change, loss19);\n    } else {\n      rsi14 = rsi(14, gain13, loss13 - change);\n      rsi20 = rsi(20, gain19, loss19 - change);\n    }\n\n    return {\n      symbol,\n      prices,\n      fullDayToday,\n      yesterday,\n      latest,\n      ma50: (total49 + latest) / 50,\n      ma200: (total199 + latest) / 200,\n      ema9: ema9Yesterday + emaMultiplier(9) * (latest - ema9Yesterday),\n      ema10: ema10Yesterday + emaMultiplier(10) * (latest - ema10Yesterday),\n      ema12: ema12Yesterday + emaMultiplier(12) * (latest - ema12Yesterday),\n      ema21: ema21Yesterday + emaMultiplier(21) * (latest - ema21Yesterday),\n      ema26: ema26Yesterday + emaMultiplier(26) * (latest - ema26Yesterday),\n      rsi14,\n      rsi20,\n      bollinger: {\n        upper1SD: ma20 + stddev20,\n        lower1SD: ma20 - stddev20,\n        upper2SD: ma20 + stddev20 * 2,\n        lower2SD: ma20 - stddev20 * 2,\n        upper3SD: ma20 + stddev20 * 3,\n        lower3SD: ma20 - stddev20 * 3,\n      },\n    };\n  }\n\n  return {\n    symbol,\n    prices,\n    fullDayToday,\n    yesterday,\n    latest: calculateLatest,\n  };\n}\n\n// TODO This needs the following changes:\n// Return a set of TechnicalCalculator objects that are preloaded with averages for the historical data\n// and can then return the proper values given today's quote for a symbol.\n// These objects should be serializable as well so that they can be calculated in the API and then transferred to the client.\n// Move this file into a new package that can be used from both the browser\n// and the API.\n\nexport function createTechnicalCalculators(history: Map<string, Bar[]>) {\n  let output = new Map<string, TechnicalCalculator>();\n  for (let [symbol, prices] of history.entries()) {\n    let calc = technicalCalculator(symbol, prices);\n    output.set(symbol, calc);\n  }\n\n  return output;\n}\n"],"file":"technicals.js"}