{"version":3,"sources":["../src/import_trades.ts"],"names":["debug","applyTradeToPosition","position","trade","simulator","PositionSimulator","legs","result","addLegs","trade_type","all_same","every","r","change","new_legs","getFlattenedList","new_trades","trades","concat","new_position","recalculateMoney","length","close_date","Date","traded","long","gross","reduce","acc","cost_basis","profit"],"mappings":";;;;;;;;AACA;;AACA;;;;AAEA,MAAMA,KAAK,GAAG,oBAAS,gCAAT,CAAd;;AAMO,SAASC,oBAAT,CACLC,QADK,EAELC,KAFK,EAGW;AAChB,MAAIC,SAAS,GAAG,IAAIC,qCAAJ,CAAsBH,QAAQ,CAACI,IAA/B,CAAhB;AACA,MAAIC,MAAM,GAAGH,SAAS,CAACI,OAAV,CAAkBL,KAAK,CAACG,IAAxB,CAAb;AAEAN,EAAAA,KAAK,CAAC,SAAD,EAAYG,KAAZ,EAAmBD,QAAnB,EAA6BK,MAA7B,CAAL;AAEA,MAAIE,UAAJ;AACA,MAAIC,QAAQ,GAAGH,MAAM,CAACI,KAAP,CAAcC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAaN,MAAM,CAAC,CAAD,CAAN,CAAUM,MAA3C,CAAf;;AACA,MAAIH,QAAJ,EAAc;AACZD,IAAAA,UAAU,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUM,MAAvB;AACD;;AAEDb,EAAAA,KAAK,CAAC,UAAD,EAAaI,SAAS,CAACE,IAAvB,CAAL;AACA,MAAIQ,QAAQ,GAAGV,SAAS,CAACW,gBAAV,EAAf;AAEA,MAAIC,UAAU,GAAGd,QAAQ,CAACe,MAAT,CAAgBC,MAAhB,CAAuBf,KAAvB,CAAjB;AACA,MAAIgB,YAAY,GAAG,EACjB,GAAGjB,QADc;AAEjBe,IAAAA,MAAM,EAAED,UAFS;AAGjBV,IAAAA,IAAI,EAAEQ,QAHW;AAIjB,OAAGM,gBAAgB,CAACJ,UAAD;AAJF,GAAnB;;AAOA,MAAI,CAACF,QAAQ,CAACO,MAAd,EAAsB;AACpBF,IAAAA,YAAY,CAACG,UAAb,GAA0B,IAAIC,IAAJ,CAASpB,KAAK,CAACqB,MAAf,CAA1B;AACD,GAFD,MAEO;AACL;AACAL,IAAAA,YAAY,CAACG,UAAb,GAA0B,IAA1B;AACD;;AAED,SAAO;AACLpB,IAAAA,QAAQ,EAAEiB,YADL;AAELN,IAAAA,MAAM,EAAEJ,UAFH;AAGLN,IAAAA;AAHK,GAAP;AAKD;;AAEM,SAASiB,gBAAT,CAA0BH,MAA1B,EAA6C;AAClD,MAAIQ,IAAI,GAAGR,MAAM,CAAC,CAAD,CAAN,CAAUS,KAAV,GAAkB,CAA7B;AACA,SAAOT,MAAM,CAACU,MAAP,CACL,CAACC,GAAD,EAAMzB,KAAN,KAAgB;AACd,QAAKsB,IAAI,IAAItB,KAAK,CAACuB,KAAN,GAAc,CAAvB,IAA8B,CAACD,IAAD,IAAStB,KAAK,CAACuB,KAAN,GAAc,CAAzD,EAA6D;AAC3DE,MAAAA,GAAG,CAACC,UAAJ,IAAkB1B,KAAK,CAACuB,KAAxB;AACD;;AAEDE,IAAAA,GAAG,CAACE,MAAJ,IAAc3B,KAAK,CAACuB,KAApB;AACA,WAAOE,GAAP;AACD,GARI,EASL;AAAEC,IAAAA,UAAU,EAAE,CAAd;AAAiBC,IAAAA,MAAM,EAAE;AAAzB,GATK,CAAP;AAWD","sourcesContent":["import { DbPosition, DbTrade, DbTradeAndPosition } from 'types';\nimport { Change, PositionSimulator } from './position_simulator';\nimport debugMod from 'debug';\n\nconst debug = debugMod('options-analysis:import_trades');\n\nexport interface PositionChange extends DbTradeAndPosition {\n  change: Change;\n}\n\nexport function applyTradeToPosition(\n  position: DbPosition,\n  trade: DbTrade\n): PositionChange {\n  let simulator = new PositionSimulator(position.legs);\n  let result = simulator.addLegs(trade.legs);\n\n  debug('Applied', trade, position, result);\n\n  let trade_type: Change;\n  let all_same = result.every((r) => r.change === result[0].change);\n  if (all_same) {\n    trade_type = result[0].change;\n  }\n\n  debug('sim legs', simulator.legs);\n  let new_legs = simulator.getFlattenedList();\n\n  let new_trades = position.trades.concat(trade);\n  let new_position = {\n    ...position,\n    trades: new_trades,\n    legs: new_legs,\n    ...recalculateMoney(new_trades),\n  };\n\n  if (!new_legs.length) {\n    new_position.close_date = new Date(trade.traded);\n  } else {\n    // This happens sometimes when rolling legs through separate trades.\n    new_position.close_date = null;\n  }\n\n  return {\n    position: new_position,\n    change: trade_type,\n    trade,\n  };\n}\n\nexport function recalculateMoney(trades: DbTrade[]) {\n  let long = trades[0].gross < 0;\n  return trades.reduce(\n    (acc, trade) => {\n      if ((long && trade.gross < 0) || (!long && trade.gross > 0)) {\n        acc.cost_basis += trade.gross;\n      }\n\n      acc.profit += trade.gross;\n      return acc;\n    },\n    { cost_basis: 0, profit: 0 }\n  );\n}\n"],"file":"import_trades.js"}