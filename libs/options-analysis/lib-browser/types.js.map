{"version":3,"sources":["../src/types.ts"],"names":["occExpirationFromDate","d","year","getUTCFullYear","toString","slice","month","getUTCMonth","padStart","day","getUTCDate","dateFromOccExpiration","e","Date","fullSymbol","ol","padSymbol","call","strike","legType","symbol","underlying","padEnd","expiration","optionInfoFromSymbol","trim","length","undefined","trimStart","optionInfoFromLeg","leg","id","size"],"mappings":"AA4CA,OAAO,SAASA,qBAAT,CAA+BC,CAA/B,EAAwC;AAC7C,MAAIC,IAAI,GAAGD,CAAC,CAACE,cAAF,GAAmBC,QAAnB,GAA8BC,KAA9B,CAAoC,CAApC,CAAX;AACA,MAAIC,KAAK,GAAG,CAACL,CAAC,CAACM,WAAF,KAAkB,CAAnB,EAAsBH,QAAtB,GAAiCI,QAAjC,CAA0C,CAA1C,EAA6C,GAA7C,CAAZ;AACA,MAAIC,GAAG,GAAGR,CAAC,CAACS,UAAF,GAAeN,QAAf,GAA0BI,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,CAAV;AACA,SAAQ,GAAEN,IAAK,GAAEI,KAAM,GAAEG,GAAI,EAA7B;AACD;AAED,OAAO,SAASE,qBAAT,CAA+BC,CAA/B,EAA0C;AAC/C,MAAIV,IAAI,GAAG,OAAOU,CAAC,CAACP,KAAF,CAAQ,CAAR,EAAW,CAAX,CAAlB;AACA,SAAO,IAAIQ,IAAJ,CAAS,CAACX,IAAV,EAAgB,CAACU,CAAC,CAACP,KAAF,CAAQ,CAAR,EAAW,CAAX,CAAD,GAAiB,CAAjC,EAAoC,CAACO,CAAC,CAACP,KAAF,CAAQ,CAAR,CAArC,CAAP;AACD;AAED,OAAO,SAASS,UAAT,CAAoBC,EAApB,EAAoCC,SAAS,GAAG,IAAhD,EAAsD;AAC3D,MAAI,OAAOD,EAAE,CAACE,IAAV,KAAmB,SAAnB,IAAgCF,EAAE,CAACG,MAAvC,EAA+C;AAC7C,QAAIC,OAAO,GAAGJ,EAAE,CAACE,IAAH,GAAU,GAAV,GAAgB,GAA9B;AACA,QAAIC,MAAM,GAAG,CAACH,EAAE,CAACG,MAAH,GAAY,IAAb,EAAmBd,QAAnB,GAA8BI,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,EAA+CH,KAA/C,CAAqD,CAArD,EAAwD,CAAxD,CAAb;AACA,QAAIe,MAAM,GAAGJ,SAAS,GAAGD,EAAE,CAACM,UAAH,CAAcC,MAAd,CAAqB,CAArB,EAAwB,GAAxB,CAAH,GAAkCP,EAAE,CAACM,UAA3D;AACA,WAAQ,GAAED,MAAO,GAAEL,EAAE,CAACQ,UAAW,GAAEJ,OAAQ,GAAED,MAAO,EAApD;AACD,GALD,MAKO;AACL;AACA,WAAOH,EAAE,CAACM,UAAV;AACD;AACF;AAED,OAAO,SAASG,oBAAT,CAA8BJ,MAA9B,EAA0D;AAC/D,MAAIC,UAAU,GAAGD,MAAM,CAACf,KAAP,CAAa,CAAb,EAAgB,CAAhB,EAAmBoB,IAAnB,EAAjB;;AACA,MAAIL,MAAM,CAACM,MAAP,IAAiB,CAArB,EAAwB;AACtB,WAAO;AACLL,MAAAA,UADK;AAELE,MAAAA,UAAU,EAAEI,SAFP;AAGLV,MAAAA,IAAI,EAAEU,SAHD;AAILT,MAAAA,MAAM,EAAES;AAJH,KAAP;AAMD;;AAED,SAAO;AACLN,IAAAA,UADK;AAELE,IAAAA,UAAU,EAAEH,MAAM,CAACf,KAAP,CAAa,CAAb,EAAgB,EAAhB,CAFP;AAGLY,IAAAA,IAAI,EAAEG,MAAM,CAAC,EAAD,CAAN,KAAe,GAHhB;AAILF,IAAAA,MAAM,EAAE,CAACE,MAAM,CAACf,KAAP,CAAa,EAAb,EAAiBuB,SAAjB,EAAD,GAAgC;AAJnC,GAAP;AAMD;AAED,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAuD;AAC5D,SAAO;AACLC,IAAAA,EAAE,EAAED,GAAG,CAACC,EADH;AAELC,IAAAA,IAAI,EAAEF,GAAG,CAACE,IAFL;AAGL,OAAGR,oBAAoB,CAACM,GAAG,CAACV,MAAL;AAHlB,GAAP;AAKD","sourcesContent":["export interface TradeLeg {\n  size: number;\n  price: number;\n  symbol: string;\n}\n\nexport interface Trade {\n  price_each: number;\n  gross: number;\n  legs: TradeLeg[];\n}\n\nexport interface PositionLegInfo {\n  openingIsLong: boolean;\n  totalBasis: number;\n  maxLegs: number;\n  openBasis: number;\n  openLegs: number;\n  realized: number;\n  multiplier: number;\n}\n\nexport interface Position<T extends Trade> {\n  symbol: string;\n  legs: OptionLeg[];\n  trades: T[];\n}\n\nexport interface OptionLeg {\n  id?: string;\n  symbol: string;\n  size: number;\n  price?: number;\n}\n\nexport interface OptionInfo {\n  id?: string;\n  underlying: string;\n  strike: number;\n  expiration: string;\n  call: boolean;\n  size?: number;\n}\n\nexport function occExpirationFromDate(d: Date) {\n  let year = d.getUTCFullYear().toString().slice(2);\n  let month = (d.getUTCMonth() + 1).toString().padStart(2, '0');\n  let day = d.getUTCDate().toString().padStart(2, '0');\n  return `${year}${month}${day}`;\n}\n\nexport function dateFromOccExpiration(e: string) {\n  let year = '20' + e.slice(0, 2);\n  return new Date(+year, +e.slice(2, 4) - 1, +e.slice(4));\n}\n\nexport function fullSymbol(ol: OptionInfo, padSymbol = true) {\n  if (typeof ol.call === 'boolean' && ol.strike) {\n    let legType = ol.call ? 'C' : 'P';\n    let strike = (ol.strike * 1000).toString().padStart(8, '0').slice(0, 8);\n    let symbol = padSymbol ? ol.underlying.padEnd(6, ' ') : ol.underlying;\n    return `${symbol}${ol.expiration}${legType}${strike}`;\n  } else {\n    // Otherwise it's just an equity.\n    return ol.underlying;\n  }\n}\n\nexport function optionInfoFromSymbol(symbol: string): OptionInfo {\n  let underlying = symbol.slice(0, 6).trim();\n  if (symbol.length <= 6) {\n    return {\n      underlying,\n      expiration: undefined,\n      call: undefined,\n      strike: undefined,\n    };\n  }\n\n  return {\n    underlying,\n    expiration: symbol.slice(6, 12),\n    call: symbol[12] === 'C',\n    strike: +symbol.slice(13).trimStart() / 1000,\n  };\n}\n\nexport function optionInfoFromLeg(leg: OptionLeg): OptionInfo {\n  return {\n    id: leg.id,\n    size: leg.size,\n    ...optionInfoFromSymbol(leg.symbol),\n  };\n}\n"],"file":"types.js"}