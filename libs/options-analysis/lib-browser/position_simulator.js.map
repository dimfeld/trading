{"version":3,"sources":["../src/position_simulator.ts"],"names":["Change","PositionSimulator","constructor","initial","legs","leg","symbol","list","push","getFlattenedList","Object","entries","map","size","reduce","acc","val","filter","Boolean","addLegs","flatMap","addLeg","existing","length","affected","changedBy","change","Opened","changeAmount","totalSize","created","pnl","result","newExisting","remaining","absRemaining","Math","abs","el","absSize","Closed","price","closedLeg","Reduced","newLeg","undefined"],"mappings":"AAEA,WAAYA,MAAZ;;WAAYA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;AAAAA,EAAAA,M,CAAAA,M;GAAAA,M,KAAAA,M;;AAwBZ;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAG7BC,EAAAA,WAAW,CAACC,OAAD,EAAwB;AACjC,SAAKC,IAAL,GAAY,EAAZ;;AACA,SAAK,IAAIC,GAAT,IAAgBF,OAAO,IAAI,EAA3B,EAA+B;AAC7B,UAAIG,MAAM,GAAGD,GAAG,CAACC,MAAjB;AACA,UAAIC,IAAI,GAAG,KAAKH,IAAL,CAAUE,MAAV,CAAX;;AACA,UAAIC,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACC,IAAL,CAAUH,GAAV;AACD,OAFD,MAEO;AACL,aAAKD,IAAL,CAAUE,MAAV,IAAoB,CAACD,GAAD,CAApB;AACD;AACF;AACF;;AAEDI,EAAAA,gBAAgB,GAAgB;AAC9B,WAAOC,MAAM,CAACC,OAAP,CAAe,KAAKP,IAApB,EACJQ,GADI,CACA,CAAC,CAACN,MAAD,EAASF,IAAT,CAAD,KAAoB;AACvB,UAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,UAAIS,IAAI,GAAGT,IAAI,CAACU,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACH,IAApC,EAA0C,CAA1C,CAAX;;AACA,UAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,eAAO;AAAEP,UAAAA,MAAF;AAAUO,UAAAA;AAAV,SAAP;AACD;AACF,KAVI,EAWJI,MAXI,CAWGC,OAXH,CAAP;AAYD;;AAEDC,EAAAA,OAAO,CAACf,IAAD,EAAuC;AAC5C,WAAOA,IAAI,CAACgB,OAAL,CAAcf,GAAD,IAAS,KAAKgB,MAAL,CAAYhB,GAAZ,CAAtB,CAAP;AACD;;AAEDgB,EAAAA,MAAM,CAAChB,GAAD,EAAoC;AACxC,QAAIC,MAAM,GAAGD,GAAG,CAACC,MAAjB;AACA,QAAIgB,QAAQ,GAAG,KAAKlB,IAAL,CAAUE,MAAV,CAAf;;AACA,QAAI,CAACgB,QAAD,IAAa,CAACA,QAAQ,CAACC,MAA3B,EAAmC;AACjC,WAAKnB,IAAL,CAAUE,MAAV,IAAoB,CAACD,GAAD,CAApB;AACA,aAAO,CACL;AACEmB,QAAAA,QAAQ,EAAEnB,GADZ;AAEEoB,QAAAA,SAAS,EAAEpB,GAFb;AAGEqB,QAAAA,MAAM,EAAE1B,MAAM,CAAC2B,MAHjB;AAIEC,QAAAA,YAAY,EAAEvB,GAAG,CAACQ,IAJpB;AAKEgB,QAAAA,SAAS,EAAExB,GAAG,CAACQ,IALjB;AAMEiB,QAAAA,OAAO,EAAE,IANX;AAOEC,QAAAA,GAAG,EAAE,CAPP,CAOU;;AAPV,OADK,CAAP;AAWD,KAbD,MAaO,IAAIT,QAAQ,CAAC,CAAD,CAAR,CAAYT,IAAZ,GAAmBR,GAAG,CAACQ,IAAvB,GAA8B,CAAlC,EAAqC;AAC1C;AACAS,MAAAA,QAAQ,CAACd,IAAT,CAAcH,GAAd;AACA,aAAO,CACL;AACEmB,QAAAA,QAAQ,EAAEnB,GADZ;AAEEoB,QAAAA,SAAS,EAAEpB,GAFb;AAGEqB,QAAAA,MAAM,EAAE1B,MAAM,CAAC2B,MAHjB;AAIEC,QAAAA,YAAY,EAAEvB,GAAG,CAACQ,IAJpB;AAKEgB,QAAAA,SAAS,EAAEP,QAAQ,CAACR,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACH,IAAxC,EAA8C,CAA9C,CALb;AAMEiB,QAAAA,OAAO,EAAE,IANX;AAOEC,QAAAA,GAAG,EAAE;AAPP,OADK,CAAP;AAWD,KA9BuC,CAgCxC;;;AACA,QAAIC,MAAyB,GAAG,EAAhC;AACA,QAAIC,WAAwB,GAAG,EAA/B;AACA,QAAIJ,SAAS,GAAGP,QAAQ,CAACR,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACH,IAAxC,EAA8CR,GAAG,CAACQ,IAAlD,CAAhB;AAEA,QAAIqB,SAAS,GAAG7B,GAAG,CAACQ,IAApB;AACA,QAAIsB,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASH,SAAT,CAAnB;;AAEA,SAAK,IAAII,EAAT,IAAehB,QAAf,EAAyB;AACvB,UAAIiB,OAAO,GAAGH,IAAI,CAACC,GAAL,CAASC,EAAE,CAACzB,IAAZ,CAAd;;AACA,UAAI0B,OAAO,IAAIJ,YAAf,EAA6B;AAC3B;AACAH,QAAAA,MAAM,CAACxB,IAAP,CAAY;AACVgB,UAAAA,QAAQ,EAAEc,EADA;AAEVb,UAAAA,SAAS,EAAEpB,GAFD;AAGVqB,UAAAA,MAAM,EAAE1B,MAAM,CAACwC,MAHL;AAIVZ,UAAAA,YAAY,EAAE,CAACU,EAAE,CAACzB,IAJR;AAKVgB,UAAAA,SALU;AAMVC,UAAAA,OAAO,EAAE,KANC;AAOVC,UAAAA,GAAG,EAAE,CAACO,EAAE,CAACG,KAAH,GAAWpC,GAAG,CAACoC,KAAhB,IAAyBH,EAAE,CAACzB;AAPvB,SAAZ;AAUAqB,QAAAA,SAAS,IAAII,EAAE,CAACzB,IAAhB;AACAsB,QAAAA,YAAY,IAAII,OAAhB;AACD,OAdD,MAcO,IAAIJ,YAAY,KAAK,CAArB,EAAwB;AAC7B;AACA;AACAG,QAAAA,EAAE,CAACzB,IAAH,IAAWqB,SAAX;AACAD,QAAAA,WAAW,CAACzB,IAAZ,CAAiB8B,EAAjB,EAJ6B,CAM7B;;AACA,YAAII,SAAS,GAAG,EAAE,GAAGJ;AAAL,SAAhB;AACAI,QAAAA,SAAS,CAAC7B,IAAV,GAAiB,CAACqB,SAAlB;AAEAF,QAAAA,MAAM,CAACxB,IAAP,CACE;AACEgB,UAAAA,QAAQ,EAAEc,EADZ;AAEEb,UAAAA,SAAS,EAAEpB,GAFb;AAGEqB,UAAAA,MAAM,EAAE1B,MAAM,CAAC2C,OAHjB;AAIEf,UAAAA,YAAY,EAAEM,SAJhB;AAKEL,UAAAA,SALF;AAMEC,UAAAA,OAAO,EAAE,KANX;AAOEC,UAAAA,GAAG,EAAE;AAPP,SADF,EAUE;AACEP,UAAAA,QAAQ,EAAEkB,SADZ;AAEEjB,UAAAA,SAAS,EAAEpB,GAFb;AAGEqB,UAAAA,MAAM,EAAE1B,MAAM,CAACwC,MAHjB;AAIEZ,UAAAA,YAAY,EAAEM,SAJhB;AAKEL,UAAAA,SALF;AAMEC,UAAAA,OAAO,EAAE,IANX;AAOEC,UAAAA,GAAG,EAAE,CAACO,EAAE,CAACG,KAAH,GAAWpC,GAAG,CAACoC,KAAhB,IAAyBP;AAPhC,SAVF;AAqBAA,QAAAA,SAAS,GAAGC,YAAY,GAAG,CAA3B;AACD,OAhCM,MAgCA;AACL;AACAF,QAAAA,WAAW,CAACzB,IAAZ,CAAiB8B,EAAjB;AACD;AACF;;AAED,QAAIH,YAAY,GAAG,CAAnB,EAAsB;AACpB;AACA,UAAIS,MAAM,GAAG,EAAE,GAAGvC;AAAL,OAAb;AACAuC,MAAAA,MAAM,CAAC/B,IAAP,GAAcqB,SAAd;AAEAF,MAAAA,MAAM,CAACxB,IAAP,CAAY;AACVgB,QAAAA,QAAQ,EAAEoB,MADA;AAEVnB,QAAAA,SAAS,EAAEpB,GAFD;AAGVqB,QAAAA,MAAM,EAAE1B,MAAM,CAAC2B,MAHL;AAIVC,QAAAA,YAAY,EAAEgB,MAAM,CAAC/B,IAJX;AAKVgB,QAAAA,SALU;AAMVC,QAAAA,OAAO,EAAE,IANC;AAOVC,QAAAA,GAAG,EAAE;AAPK,OAAZ;AASD;;AAED,SAAK3B,IAAL,CAAUE,MAAV,IAAoB2B,WAAW,CAACV,MAAZ,GAAqBU,WAArB,GAAmCY,SAAvD;AACA,WAAOb,MAAP;AACD;;AAnJ4B","sourcesContent":["import { OptionLeg } from './types';\n\nexport enum Change {\n  // The leg in `changedBy` closed the affected leg.\n  Closed,\n\n  // A new position was opened by this leg. `affected` and `changedBy` will be the same object.\n  Opened,\n\n  // A position was partially closed by a leg. This will always be followed by an Closed result for the closed portion of the legs.\n  // When the result is Reduced, `affected.size` will reflect the new number of options in the leg.\n  Reduced,\n}\n\nexport interface SimulationStep {\n  affected: OptionLeg;\n  changedBy: OptionLeg;\n  change: Change;\n  changeAmount: number;\n  totalSize: number;\n  pnl?: number;\n  created: boolean;\n}\n\nexport type SimulationResults = SimulationStep[];\n\n// Simulate executions and their effect on a portfolio.\nexport class PositionSimulator {\n  legs: { [key: string]: OptionLeg[] };\n\n  constructor(initial?: OptionLeg[]) {\n    this.legs = {};\n    for (let leg of initial || []) {\n      let symbol = leg.symbol;\n      let list = this.legs[symbol];\n      if (list) {\n        list.push(leg);\n      } else {\n        this.legs[symbol] = [leg];\n      }\n    }\n  }\n\n  getFlattenedList(): OptionLeg[] {\n    return Object.entries(this.legs)\n      .map(([symbol, legs]) => {\n        if (!legs) {\n          return;\n        }\n\n        let size = legs.reduce((acc, val) => acc + val.size, 0);\n        if (size !== 0) {\n          return { symbol, size };\n        }\n      })\n      .filter(Boolean);\n  }\n\n  addLegs(legs: OptionLeg[]): SimulationResults {\n    return legs.flatMap((leg) => this.addLeg(leg));\n  }\n\n  addLeg(leg: OptionLeg): SimulationResults {\n    let symbol = leg.symbol;\n    let existing = this.legs[symbol];\n    if (!existing || !existing.length) {\n      this.legs[symbol] = [leg];\n      return [\n        {\n          affected: leg,\n          changedBy: leg,\n          change: Change.Opened,\n          changeAmount: leg.size,\n          totalSize: leg.size,\n          created: true,\n          pnl: 0, // Never any P&L on an opening.\n        },\n      ];\n    } else if (existing[0].size * leg.size > 0) {\n      // The size of the existing legs and the new leg have the same sign, so this is expanding an existing position.\n      existing.push(leg);\n      return [\n        {\n          affected: leg,\n          changedBy: leg,\n          change: Change.Opened,\n          changeAmount: leg.size,\n          totalSize: existing.reduce((acc, val) => acc + val.size, 0),\n          created: true,\n          pnl: 0,\n        },\n      ];\n    }\n\n    // If we get down to here, then it's closing a position.\n    let result: SimulationResults = [];\n    let newExisting: OptionLeg[] = [];\n    let totalSize = existing.reduce((acc, val) => acc + val.size, leg.size);\n\n    let remaining = leg.size;\n    let absRemaining = Math.abs(remaining);\n\n    for (let el of existing) {\n      let absSize = Math.abs(el.size);\n      if (absSize <= absRemaining) {\n        // The new leg completely closes out this one.\n        result.push({\n          affected: el,\n          changedBy: leg,\n          change: Change.Closed,\n          changeAmount: -el.size,\n          totalSize,\n          created: false,\n          pnl: (el.price - leg.price) * el.size,\n        });\n\n        remaining -= el.size;\n        absRemaining -= absSize;\n      } else if (absRemaining !== 0) {\n        // The new leg partially closes this one, so split it into two legs, one that is the closed portion and one that is the\n        // still-active portion.\n        el.size += remaining;\n        newExisting.push(el);\n\n        // The closed leg should be the newly created object, so that the one that remains in the system is the same leg that was originally added.\n        let closedLeg = { ...el };\n        closedLeg.size = -remaining;\n\n        result.push(\n          {\n            affected: el,\n            changedBy: leg,\n            change: Change.Reduced,\n            changeAmount: remaining,\n            totalSize,\n            created: false,\n            pnl: null,\n          },\n          {\n            affected: closedLeg,\n            changedBy: leg,\n            change: Change.Closed,\n            changeAmount: remaining,\n            totalSize,\n            created: true,\n            pnl: (el.price - leg.price) * remaining,\n          }\n        );\n\n        remaining = absRemaining = 0;\n      } else {\n        // No effect since the new leg has already been applied fully.\n        newExisting.push(el);\n      }\n    }\n\n    if (absRemaining > 0) {\n      // This leg not only closed some positions, but opened new ones.\n      let newLeg = { ...leg };\n      newLeg.size = remaining;\n\n      result.push({\n        affected: newLeg,\n        changedBy: leg,\n        change: Change.Opened,\n        changeAmount: newLeg.size,\n        totalSize,\n        created: true,\n        pnl: null,\n      });\n    }\n\n    this.legs[symbol] = newExisting.length ? newExisting : undefined;\n    return result;\n  }\n}\n"],"file":"position_simulator.js"}