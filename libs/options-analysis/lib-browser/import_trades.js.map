{"version":3,"sources":["../src/import_trades.ts"],"names":["PositionSimulator","debugMod","debug","orderGross","order","legs","reduce","acc","leg","multiplier","symbol","length","size","price","orderToDbTrade","trade","id","commissions","traded","gross","tags","map","price_each","underlying","slice","trim","broker","applyTradeToPosition","position","simulator","result","addLegs","trade_type","all_same","every","r","change","new_legs","getFlattenedList","new_trades","trades","concat","new_position","recalculateMoney","close_date","Date","long","cost_basis","profit"],"mappings":"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","sourcesContent":["import { DbPosition, DbTrade, DbTradeAndPosition, Order } from 'types';\nimport { Change, PositionSimulator } from './position_simulator';\nimport debugMod from 'debug';\n\nconst debug = debugMod('options-analysis:import_trades');\n\nexport interface PositionChange extends DbTradeAndPosition {\n  change: Change;\n}\n\nexport function orderGross(order: Order) {\n  return order.legs.reduce((acc, leg) => {\n    let multiplier = leg.symbol.length > 6 ? 100 : 1;\n    return acc + -leg.size * leg.price * multiplier;\n  }, 0);\n}\n\nexport function orderToDbTrade(order: Order) {\n  let trade: DbTrade = {\n    id: order.id,\n    commissions: order.commissions,\n    traded: order.traded,\n    gross: orderGross(order),\n    tags: [],\n    legs: order.legs.map((leg) => {\n      return {\n        ...leg,\n        price: leg.price ?? null,\n      };\n    }),\n    price_each: order.price,\n  };\n\n  let underlying = order.legs[0].symbol.slice(0, 6).trim();\n  return {\n    underlying,\n    trade,\n    broker: order.broker,\n  };\n}\n\nexport function applyTradeToPosition(\n  position: DbPosition,\n  trade: DbTrade\n): PositionChange {\n  let simulator = new PositionSimulator(position.legs);\n  let result = simulator.addLegs(trade.legs);\n\n  debug('Applied', trade, position, result);\n\n  let trade_type: Change;\n  let all_same = result.every((r) => r.change === result[0].change);\n  if (all_same) {\n    trade_type = result[0].change;\n  }\n\n  debug('sim legs', simulator.legs);\n  let new_legs = simulator.getFlattenedList();\n\n  let new_trades = position.trades.concat(trade);\n  let new_position = {\n    ...position,\n    trades: new_trades,\n    legs: new_legs,\n    ...recalculateMoney(new_trades),\n  };\n\n  if (!new_legs.length) {\n    new_position.close_date = new Date(trade.traded);\n  } else {\n    // This happens sometimes when rolling legs through separate trades.\n    new_position.close_date = null;\n  }\n\n  return {\n    position: new_position,\n    change: trade_type,\n    trade,\n  };\n}\n\nexport function recalculateMoney(trades: DbTrade[]) {\n  let long = trades[0].gross < 0;\n  return trades.reduce(\n    (acc, trade) => {\n      if ((long && trade.gross < 0) || (!long && trade.gross > 0)) {\n        acc.cost_basis += trade.gross;\n      }\n\n      acc.profit += trade.gross;\n      return acc;\n    },\n    { cost_basis: 0, profit: 0 }\n  );\n}\n"],"file":"import_trades.js"}