{"version":3,"sources":["../src/match.ts"],"names":["sorter","matchPositions","broker","trade","positions","legs","matched","filter","p","map","position","overlapping","reduce","acc","leg","found_leg","find","p_leg","symbol","score","length","x","sort","value","descending"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AAkBA,OAAO,SAASC,cAAT,CACLC,MADK,EAELC,KAFK,EAGLC,SAHK,EAI4B;AACjC,MAAIC,IAAI,GAAGF,KAAK,CAACE,IAAjB;AAEA,MAAIC,OAAO,GAAGF,SAAS,CACpBG,MADW,CACHC,CAAD,IAAOA,CAAC,CAACN,MAAF,KAAaA,MAAb,IAAuB,CAACM,CAAC,CAACN,MAD7B,EAEXO,GAFW,CAENC,QAAD,IAAc;AACjB,QAAIC,WAAW,GAAGN,IAAI,CAACO,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC1C,UAAIC,SAAS,GAAGL,QAAQ,CAACL,IAAT,CAAcW,IAAd,CACbC,KAAD,IAAWA,KAAK,CAACC,MAAN,KAAiBJ,GAAG,CAACI,MADlB,CAAhB;;AAGA,UAAIH,SAAJ,EAAe;AACbF,QAAAA,GAAG,IAAI,CAAP;AACD;;AACD,aAAOA,GAAP;AACD,KARiB,EAQf,CARe,CAAlB;AAUA,WAAO;AACLM,MAAAA,KAAK,EAAER,WAAW,GAAGD,QAAQ,CAACL,IAAT,CAAce,MAD9B;AAELT,MAAAA,WAFK;AAGLD,MAAAA;AAHK,KAAP;AAKD,GAlBW,EAmBXH,MAnBW,CAmBHc,CAAD,IAAOA,CAAC,CAACF,KAAF,GAAU,CAnBb,EAoBXG,IApBW,CAoBNtB,MAAM,CAAC;AAAEuB,IAAAA,KAAK,EAAE,OAAT;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAAD,CApBA,CAAd;AAsBA,SAAOlB,OAAP;AACD","sourcesContent":["import sorter from 'sorters';\nimport { BrokerChoice } from 'types';\nimport { OptionLeg } from './types';\n\nexport interface HasOptionLegs {\n  legs: OptionLeg[];\n}\n\nexport interface HasOptionLegsAndBroker extends HasOptionLegs {\n  broker: BrokerChoice;\n}\n\nexport interface MatchingPositionScore<T> {\n  score: number;\n  overlapping: number;\n  position: T;\n}\n\nexport function matchPositions<T extends HasOptionLegsAndBroker>(\n  broker: BrokerChoice,\n  trade: HasOptionLegs,\n  positions: T[]\n): Array<MatchingPositionScore<T>> {\n  let legs = trade.legs;\n\n  let matched = positions\n    .filter((p) => p.broker === broker || !p.broker)\n    .map((position) => {\n      let overlapping = legs.reduce((acc, leg) => {\n        let found_leg = position.legs.find(\n          (p_leg) => p_leg.symbol === leg.symbol\n        );\n        if (found_leg) {\n          acc += 1;\n        }\n        return acc;\n      }, 0);\n\n      return {\n        score: overlapping / position.legs.length,\n        overlapping,\n        position,\n      };\n    })\n    .filter((x) => x.score > 0)\n    .sort(sorter({ value: 'score', descending: true }));\n\n  return matched;\n}\n"],"file":"match.js"}