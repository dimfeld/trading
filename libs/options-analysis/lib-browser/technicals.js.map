{"version":3,"sources":["../src/technicals.ts"],"names":["date","totalForDays","prices","days","result","i","emaMultiplier","ema","length","k","maxDate","Math","min","value","technicalCalculator","symbol","bars","excludeToday","map","b","close","fullDayToday","isToday","time","pricesWithoutToday","slice","total49","total50Yesterday","total199","reduce","acc","val","total200Yesterday","ema9Yesterday","ema10Yesterday","ema12Yesterday","ema21Yesterday","ema26Yesterday","ma50Yesterday","ma200Yesterday","total19","total20Yesterday","ma20Yesterday","lastRsiDay","numRsiDays","gainsByDay","Array","lossesByDay","priceIndex","change","rsi","avgGain","avgLoss","avgGain14","avgLoss14","avgGain20","avgLoss20","gain","loss","variance","initialPrice","avg","limit","initial","v","variance20Yesterday","stddev20Yesterday","sqrt","yesterday","ema9","ema10","ema12","ema21","ema26","ma50","ma200","rsi14","rsi20","bollinger","upper1SD","lower1SD","upper2SD","lower2SD","upper3SD","lower3SD","calculateLatest","latest","ma20","variance20","stddev20","createTechnicalCalculators","history","output","Map","entries","calc","set"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Bar } from 'types';\nimport * as date from 'date-fns';\n\nfunction totalForDays(prices: number[], days: number) {\n  let result = 0;\n  for (let i = 0; i < days; i += 1) {\n    result += prices[i];\n  }\n  return result;\n}\n\nfunction emaMultiplier(days: number) {\n  return 2 / (days + 1);\n}\n\nfunction ema(prices: number[], days: number) {\n  if (prices.length < days) {\n    return null;\n  }\n\n  // let smaForPeriod = totalForDays(prices, days) / days;\n\n  let k = emaMultiplier(days);\n  let maxDate = Math.min(250, prices.length - 1);\n  let value = prices[maxDate];\n  for (let i = maxDate - 1; i >= 0; i--) {\n    value = value + k * (prices[i] - value);\n  }\n\n  return value;\n}\n\nexport interface Technicals {\n  ma50: number;\n  ma200: number;\n  ema9: number;\n  ema10: number;\n  ema12: number;\n  ema21: number;\n  ema26: number;\n  rsi14: number;\n  rsi20: number;\n  bollinger: {\n    upper1SD: number;\n    lower1SD: number;\n    upper2SD: number;\n    lower2SD: number;\n    upper3SD: number;\n    lower3SD: number;\n  };\n}\n\nexport interface LatestTechnicals extends Technicals {\n  symbol: string;\n  prices: Bar[];\n  fullDayToday: boolean;\n  yesterday: Technicals;\n  latest: number;\n}\n\nexport interface TechnicalCalculator {\n  symbol: string;\n  prices: Bar[];\n  fullDayToday: boolean;\n  yesterday: Technicals;\n  latest(latestPrice: number): LatestTechnicals;\n}\n\nexport function technicalCalculator(\n  symbol: string,\n  bars: Bar[],\n  /** Exclude the first bar if it's from today. Use for daily bars only */\n  excludeToday = true\n): TechnicalCalculator {\n  let prices = bars.map((b) => b.close /*(b.open + b.close) / 2*/);\n  let fullDayToday = excludeToday && date.isToday(bars[0].time);\n  let pricesWithoutToday = fullDayToday ? prices.slice(1) : prices;\n\n  let total49 = totalForDays(pricesWithoutToday, 49);\n  let total50Yesterday = total49 + pricesWithoutToday[49];\n\n  let total199 = pricesWithoutToday\n    .slice(50, 199)\n    .reduce((acc, val) => acc + val, total50Yesterday);\n\n  let total200Yesterday = total199 + pricesWithoutToday[199];\n\n  let ema9Yesterday = ema(pricesWithoutToday, 9);\n  let ema10Yesterday = ema(pricesWithoutToday, 10);\n  let ema12Yesterday = ema(pricesWithoutToday, 12);\n  let ema21Yesterday = ema(pricesWithoutToday, 21);\n  let ema26Yesterday = ema(pricesWithoutToday, 26);\n  let ma50Yesterday = total50Yesterday / 50;\n  let ma200Yesterday = total200Yesterday / 200;\n\n  // Bollinger bands calculations\n  let total19 = totalForDays(pricesWithoutToday, 19);\n\n  let total20Yesterday = total19 + pricesWithoutToday[19];\n  let ma20Yesterday = total20Yesterday / 20;\n\n  const lastRsiDay = Math.min(250, prices.length - 2);\n  const numRsiDays = 20;\n  // These start from the end of the series.\n  let gainsByDay = new Array(numRsiDays);\n  let lossesByDay = new Array(numRsiDays);\n\n  for (let i = 0; i < numRsiDays; ++i) {\n    let priceIndex = lastRsiDay - i;\n    let change =\n      pricesWithoutToday[priceIndex] - pricesWithoutToday[priceIndex + 1];\n    if (change >= 0) {\n      gainsByDay[i] = (gainsByDay[i - 1] || 0) + change;\n      lossesByDay[i] = lossesByDay[i - 1] || 0;\n    } else {\n      gainsByDay[i] = gainsByDay[i - 1];\n      lossesByDay[i] = (lossesByDay[i - 1] || 0) - change;\n    }\n  }\n\n  function rsi(avgGain, avgLoss) {\n    return 100 - 100 / (1 + avgGain / avgLoss);\n  }\n\n  let avgGain14 = gainsByDay[13] / 14;\n  let avgLoss14 = gainsByDay[13] / 14;\n  let avgGain20 = gainsByDay[19] / 20;\n  let avgLoss20 = gainsByDay[19] / 20;\n\n  for (let i = lastRsiDay - numRsiDays; i >= 0; --i) {\n    let change = prices[i] - prices[i - 1];\n    let gain;\n    let loss;\n    if (change > 0) {\n      gain = change;\n      loss = 0;\n    } else {\n      gain = 0;\n      loss = change;\n    }\n\n    avgGain14 = (avgGain14 * 13 + gain) / 14;\n    avgLoss14 = (avgLoss14 * 13 - loss) / 14;\n    avgGain20 = (avgGain20 * 19 + gain) / 20;\n    avgLoss20 = (avgLoss20 * 19 - loss) / 20;\n  }\n\n  function variance(initialPrice, avg, limit) {\n    let initial = initialPrice ? initialPrice - avg : 0;\n    return pricesWithoutToday.slice(0, limit).reduce((acc, val) => {\n      let v = val - avg;\n      return acc + v * v;\n    }, initial * initial);\n  }\n\n  let variance20Yesterday = variance(0, ma20Yesterday, 20) / 20;\n  let stddev20Yesterday = Math.sqrt(variance20Yesterday);\n\n  let yesterday = {\n    prices: pricesWithoutToday,\n    ema9: ema9Yesterday,\n    ema10: ema10Yesterday,\n    ema12: ema12Yesterday,\n    ema21: ema21Yesterday,\n    ema26: ema26Yesterday,\n    ma50: ma50Yesterday,\n    ma200: ma200Yesterday,\n    rsi14: rsi(avgGain14, avgLoss14),\n    rsi20: rsi(avgGain20, avgLoss20),\n    bollinger: {\n      upper1SD: ma20Yesterday + stddev20Yesterday,\n      lower1SD: ma20Yesterday - stddev20Yesterday,\n      upper2SD: ma20Yesterday + stddev20Yesterday * 2,\n      lower2SD: ma20Yesterday - stddev20Yesterday * 2,\n      upper3SD: ma20Yesterday + stddev20Yesterday * 3,\n      lower3SD: ma20Yesterday - stddev20Yesterday * 3,\n    },\n  };\n\n  function calculateLatest(latest: number) {\n    let ma20 = (total19 + latest) / 20;\n    let variance20 = variance(latest, ma20, 19) / 20;\n    let stddev20 = Math.sqrt(variance20);\n\n    let rsi14;\n    let rsi20;\n    let change = latest - pricesWithoutToday[0];\n    if (change > 0) {\n      rsi14 = rsi((avgGain14 * 13 + change) / 14, avgLoss14);\n      rsi20 = rsi((avgGain20 * 19 + change) / 20, avgLoss20);\n    } else {\n      rsi14 = rsi(avgGain14, (avgLoss14 * 13 - change) / 14);\n      rsi20 = rsi(avgGain20, (avgLoss20 * 19 - change) / 20);\n    }\n\n    return {\n      symbol,\n      prices: bars,\n      fullDayToday,\n      yesterday,\n      latest,\n      ma20,\n      ma50: (total49 + latest) / 50,\n      ma200: (total199 + latest) / 200,\n      ema9: ema9Yesterday + emaMultiplier(9) * (latest - ema9Yesterday),\n      ema10: ema10Yesterday + emaMultiplier(10) * (latest - ema10Yesterday),\n      ema12: ema12Yesterday + emaMultiplier(12) * (latest - ema12Yesterday),\n      ema21: ema21Yesterday + emaMultiplier(21) * (latest - ema21Yesterday),\n      ema26: ema26Yesterday + emaMultiplier(26) * (latest - ema26Yesterday),\n      rsi14,\n      rsi20,\n      bollinger: {\n        upper1SD: ma20 + stddev20,\n        lower1SD: ma20 - stddev20,\n        upper2SD: ma20 + stddev20 * 2,\n        lower2SD: ma20 - stddev20 * 2,\n        upper3SD: ma20 + stddev20 * 3,\n        lower3SD: ma20 - stddev20 * 3,\n      },\n    };\n  }\n\n  return {\n    symbol,\n    prices: bars,\n    fullDayToday,\n    yesterday,\n    latest: calculateLatest,\n  };\n}\n\n// TODO This needs the following changes:\n// Return a set of TechnicalCalculator objects that are preloaded with averages for the historical data\n// and can then return the proper values given today's quote for a symbol.\n// These objects should be serializable as well so that they can be calculated in the API and then transferred to the client.\n// Move this file into a new package that can be used from both the browser\n// and the API.\n\nexport function createTechnicalCalculators(history: Map<string, Bar[]>) {\n  let output = new Map<string, TechnicalCalculator>();\n  for (let [symbol, prices] of history.entries()) {\n    let calc = technicalCalculator(symbol, prices);\n    output.set(symbol, calc);\n  }\n\n  return output;\n}\n"],"file":"technicals.js"}